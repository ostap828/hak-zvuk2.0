import asyncio
import logging
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from sqlalchemy.ext.asyncio import async_session, AsyncSession
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.dispatcher import Dispatcher
from DB import User, History, create_tables as init_db, async_session as async_session_maker, create_history, get_user_history
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Any, Awaitable, Callable, Dict
from sqlalchemy import select

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class BotStates(StatesGroup):
    waiting_for_name = State()
    analytics_mode = State()
    chat_tz = State()


# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
analyses = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_analytics_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="exit_analytics"),
            InlineKeyboardButton(text="–ß–∞—Ç –ø–æ –¢–ó", callback_data="chat_tz")
        ]
    ])
    return keyboard


def get_history_keyboard():
    buttons = []
    for analysis_id, analysis in analyses.items():
        buttons.append([InlineKeyboardButton(
            text=f"–ê–Ω–∞–ª–∏–∑ {analysis_id}",
            callback_data=f"analysis_{analysis_id}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_analysis_options_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="start_analytics"),
            InlineKeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞", callback_data="delete_analysis"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_history")
        ]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥


@router.message(Command("start"))
@router.message(F.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_user(message: Message, session: AsyncSession):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    username = message.from_user.full_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –ø–æ users_id
        existing_user = await session.execute(select(User).where(User.users_id == user_id))
        existing_user = existing_user.scalar_one_or_none()
        
        if existing_user:
            await message.answer("üîÑ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            users_id=user_id,
            users_name=username
        )

        session.add(new_user)
        await session.commit()

        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {username}"
        )

    except Exception as e:
        await session.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


@router.message(BotStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext, session: AsyncSession):
    user_name = message.text
    user_id = message.from_user.id

    if len(user_name) < 2:
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ó–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –º–æ–¥–µ–ª–∏ User
    new_user = User(
        users_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
        users_name=user_name
    )
    session.add(new_user)
    await session.commit()

    await message.reply(
        f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    await state.clear()


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
    ü§ñ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞:

    /upload_tech - –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    /history - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    –í —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ:
    - –û–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –ø–æ –¢–ó
    - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

    –í –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ:
    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—à–ª—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    - –£–¥–∞–ª—è—Ç—å –∞–Ω–∞–ª–∏–∑—ã
    - –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    await message.reply(help_text)


@router.message(Command("upload_tech"))
async def cmd_upload_tech(message: types.Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¢–ó
        history_record = await create_history(
            session=session,
            users_id=user_id,
            path_to_tz="path/to/tz",  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¢–ó
            path_to_analyze="path/to/analysis"  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É
        )
        await session.commit()
        
        await state.set_state(BotStates.analytics_mode)
        await message.reply(
            "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_analytics_keyboard()
        )
    except Exception as e:
        await session.rollback()
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


@router.message(Command("history"))
async def cmd_history(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_history = await get_user_history(session, users_id=user_id)
        
        if not user_history:
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        buttons = []
        for history in user_history:
            buttons.append([InlineKeyboardButton(
                text=f"–ê–Ω–∞–ª–∏–∑ #{history.id}",
                callback_data=f"analysis_{history.id}"
            )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã:", reply_markup=keyboard)
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@router.callback_query(F.data == "chat_tz")
async def process_chat_tz(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.chat_tz)
    await callback_query.message.reply("–†–µ–∂–∏–º —á–∞—Ç–∞ –ø–æ –¢–ó –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback_query.answer()


@router.callback_query(F.data == "exit_analytics")
async def process_exit_analytics(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.reply("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    await callback_query.answer()


@router.callback_query(F.data.startswith("analysis_"))
async def process_analysis_selection(callback_query: types.CallbackQuery):
    analysis_id = callback_query.data.split("_")[1]
    await callback_query.message.reply(
        f"–í—ã–±—Ä–∞–Ω –∞–Ω–∞–ª–∏–∑ {analysis_id}",
        reply_markup=get_analysis_options_keyboard()
    )
    await callback_query.answer()


@router.callback_query(F.data == "start_analytics")
async def process_start_analytics(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback_query.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        history_record = await create_history(
            session=session,
            users_id=user_id,
            path_to_tz="path/to/tz",  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¢–ó
            path_to_analyze="path/to/analysis"  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É
        )
        await session.commit()
        
        await state.set_state(BotStates.analytics_mode)
        await callback_query.message.reply(
            "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_analytics_keyboard()
        )
    except Exception as e:
        await session.rollback()
        await callback_query.message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    await callback_query.answer()


@router.callback_query(F.data == "delete_analysis")
async def process_delete_analysis(callback_query: types.CallbackQuery):
    analysis_id = callback_query.message.text.split()[-1]
    if analysis_id in analyses:
        del analyses[analysis_id]
        await callback_query.message.reply("–ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω.")
    await callback_query.message.reply(
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã:",
        reply_markup=get_history_keyboard()
    )
    await callback_query.answer()


@router.callback_query(F.data == "back_to_history")
async def process_back_to_history(callback_query: types.CallbackQuery):
    await callback_query.message.reply(
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã:",
        reply_markup=get_history_keyboard()
    )
    await callback_query.answer()


# –≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ –ø–æ –¢–ó
@router.message(BotStates.chat_tz)
async def echo_message(message: types.Message):
    await message.reply(message.text)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π
    BOT_TOKEN = "8097160235:AAF0_dJuMn_jxRmZJDsMxUVIpsOGj6-MHRc"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.update.middleware(DatabaseMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


class DatabaseMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        async with async_session_maker() as session:
            data["session"] = session
            result = await handler(event, data)
        return result


if __name__ == '__main__':
    asyncio.run(main())